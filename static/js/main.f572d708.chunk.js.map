{"version":3,"sources":["components/Questions.js","components/QuestionBox.js","components/Result.js","index.js"],"names":["qBank","question","answers","correct","questionId","n","Promise","resolve","sort","Math","random","slice","QuestionBox","options","selected","useState","answer","setAnswer","className","map","text","index","key","onClick","Result","score","playAgain","Quiz","state","questionBank","responses","getQuestion","pickQuestion","then","setState","computeAnswer","correctAnswer","this","length","Component","ReactDOM","render","document","getElementById"],"mappings":"uMAAMA,G,MAAQ,CACZ,CACEC,SACE,2CACFC,QAAS,CAAE,QAAS,WAAY,WAAW,oBAC3CC,QAAS,WACTC,WAAY,UAEd,CACEH,SACE,4CACFC,QAAS,CAAE,QAAS,WAAY,WAAY,oBAC5CC,QAAS,WACTC,WAAY,UAEd,CACEH,SACE,0BACFC,QAAS,CAAC,WAAY,WAAY,QAAS,oBAC3CC,QAAS,WACTC,WAAY,UAEd,CACEH,SAAU,gCACVC,QAAS,CAAC,WAAY,QAAS,mBAAmB,YAClDC,QAAS,WACTC,WAAY,UAEd,CACEH,SAAU,6BACVC,QAAS,CAAC,WAAY,QAAS,WAAY,oBAC3CC,QAAS,WACTC,WAAY,UAEd,CACEH,SACE,wCACFC,QAAS,CAAC,WAAW,WAAY,QAAU,oBAC3CC,QAAS,WACTC,WAAY,YAKD,iBAACC,EAAD,uDAAK,EAAL,OACbC,QAAQC,QAAQP,EAAMQ,MAAK,iBAAM,GAAMC,KAAKC,YAAUC,MAAM,EAAGN,K,OC1BlDO,EAjBK,SAAC,GAAmC,IAAlCX,EAAiC,EAAjCA,SAAUY,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SAAc,EACvBC,mBAASF,GADc,mBAC5CG,EAD4C,KACpCC,EADoC,KAEnD,OACI,yBAAKC,UAAU,eACf,yBAAKA,UAAU,YAAYjB,GAC1Be,EAAOG,KAAI,SAACC,EAAMC,GAAP,OACV,4BAAQC,IAAKD,EAAOH,UAAU,YAC9BK,QAAS,WACLN,EAAU,CAACG,IACXN,EAASM,KAEbA,QCJKI,EAPA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,UAAT,OACX,yBAAKR,UAAY,eACb,yBAAKA,UAAU,SAAf,WAAgCO,GAChC,yBAAKP,UAAU,UACf,4BAAQA,UAAU,UAAUK,QAASG,GAArC,kBCCFC,E,4MACFC,MAAQ,CACJC,aAAc,GACdJ,MAAO,EACPK,UAAW,G,EAEfC,YAAc,WACVC,IAAeC,MAAK,SAAAhC,GAChB,EAAKiC,SAAS,CACVL,aAAc5B,Q,EAK1BkC,cAAgB,SAACnB,EAAQoB,GACjBpB,IAAWoB,GACX,EAAKF,SAAS,CACVT,MAAO,EAAKG,MAAMH,MAAQ,IAG9B,EAAKS,SAAS,CACVJ,UAAW,EAAKF,MAAME,UAAY,EAClC,EAAKF,MAAME,UAAW,EAAI,K,EAItCJ,UAAY,WACR,EAAKQ,SAAS,CACVL,aAAc,GACdJ,MAAO,EACPK,UAAW,IAEf,EAAKC,e,kEAKLM,KAAKN,gB,+BAEC,IAAD,OACL,OACA,yBAAKb,UAAU,aACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,QAAf,uBAEHmB,KAAKT,MAAMC,aAAaS,OAAS,GAG/BD,KAAKT,MAAME,UAAY,GACvBO,KAAKT,MAAMC,aAAaV,KAAI,gBAC3BlB,EAD2B,EAC3BA,SAAUC,EADiB,EACjBA,QAASC,EADQ,EACRA,QAASC,EADD,EACCA,WADD,OAG/B,kBAAC,EAAD,CACIH,SAAUA,EACVY,QAASX,EACToB,IAAKlB,EACLU,SAAU,SAAAE,GAAM,OAAI,EAAKmB,cAAcnB,EAAQb,SAKzB,IAAzBkC,KAAKT,MAAME,UACX,kBAAC,EAAD,CAAQL,MAAOY,KAAKT,MAAMH,MAAOC,UAAWW,KAAKX,YAAiB,U,GA9D5Da,aAoEnBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,U","file":"static/js/main.f572d708.chunk.js","sourcesContent":["const qBank = [\n  {\n    question:\n      \"Are you capable of leaning new skill?   \",\n    answers: [ \"Maybe\", \"Not sure\", \"Oh yeah!\",\"Too overwhelming\"],\n    correct: \"Oh yeah!\",\n    questionId: \"099099\"\n  },\n  {\n    question:\n      'Will you be able to build your portfolio?',\n    answers: [ \"Maybe\", \"Oh yeah!\", \"Not sure\", \"Too overwhelming\"],\n    correct: \"Oh yeah!\",\n    questionId: \"183452\"\n  },\n  {\n    question:\n      \"Can you learn React.js?\",\n    answers: [\"Oh yeah!\", \"Not sure\", \"Maybe\", \"Too overwhelming\"],\n    correct: \"Oh yeah!\",\n    questionId: \"267908\"\n  },\n  {\n    question: \"Can you build an amazing app?\",\n    answers: [\"Not sure\", \"Maybe\", \"Too overwhelming\",\"Oh yeah!\"],\n    correct: \"Oh yeah!\",\n    questionId: \"333247\"\n  },\n  {\n    question: \"Do you enjoy coding daily?\",\n    answers: [\"Oh yeah!\", \"Maybe\", \"Not sure\", \"Too overwhelming\"],\n    correct: \"Oh yeah!\",\n    questionId: \"496293\"\n  },\n  {\n    question:\n      \"Are you going to be an awesome coder?\",\n    answers: [\"Not sure\",\"Oh yeah!\", \"Maybe\",  \"Too overwhelming\"],\n    correct: \"Oh yeah!\",\n    questionId: \"588909\"\n  }\n \n];\n\nexport default (n = 3) =>\n  Promise.resolve(qBank.sort(() => 0.5 - Math.random()).slice(0, n));\n","import React, {useState} from 'react';\n\nconst QuestionBox = ({question, options, selected}) => {\n    const [answer, setAnswer] = useState(options);\n    return (\n        <div className='questionBox'>\n        <div className='question'>{question}</div>\n        {answer.map((text, index) => (\n          <button key={index} className='answerBtn'\n          onClick={() => {\n              setAnswer([text]);\n              selected(text);\n          }}\n        >{text}</button>\n        ) )}\n        </div>\n    );\n};\n\nexport default QuestionBox;","import React from 'react';\n\nconst Result = ({score, playAgain}) => \n    <div className = 'score-board'>\n        <div className='score'> Score: {score}</div>\n        <div className='Button'>\n        <button className='playBtn' onClick={playAgain}>Play again!</button>\n    </div>\n    </div>\nexport default Result;","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport pickQuestion from './components/Questions';\nimport QuestionBox from './components/QuestionBox';\nimport Result from './components/Result';\n\nclass Quiz extends Component {\n    state = {\n        questionBank: [],\n        score: 0,\n        responses: 0\n    };\n    getQuestion = () => {\n        pickQuestion().then(question => {\n            this.setState({\n                questionBank: question\n            });\n        });\n    };\n\n    computeAnswer = (answer, correctAnswer) => {\n        if (answer === correctAnswer) {\n            this.setState({\n                score: this.state.score + 1\n            });\n        } \n            this.setState({\n                responses: this.state.responses < 3 ? \n                this.state.responses +1 : 3\n            })\n        };\n\n    playAgain = () => {\n        this.setState({\n            questionBank: [],\n            score: 0,\n            responses: 0\n        });\n        this.getQuestion();\n\n    }\n\n    componentDidMount() {\n        this.getQuestion();\n    }\n    render() {\n        return (\n        <div className='container'>\n            <div className='title'>\n                <div className='span'>Quiz for coders :)</div>\n                </div>\n            {this.state.questionBank.length > 0\n            // to check if questionBank array \n            // does have data to render\n            && this.state.responses < 3\n            && this.state.questionBank.map(({\n                question, answers, correct, questionId\n            }) => (\n            <QuestionBox \n                question={question}\n                options={answers}\n                key={questionId}\n                selected={answer => this.computeAnswer(answer, correct)}\n                />\n            )\n            )}\n            {/* <h3>Score: {this.state.score} </h3> */}\n            {this.state.responses === 3 ?\n            (<Result score={this.state.score} playAgain={this.playAgain} />) : null}\n        </div>\n        );\n    }\n}\n\nReactDOM.render(<Quiz />, document.getElementById('root'));"],"sourceRoot":""}